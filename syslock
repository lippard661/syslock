#!/usr/bin/perl -w
# Script to lock/unlock system files by making them immutable.
# Unlocking must be done as root from single user mode.
#
# This code was inspired by code by George Shaffer
# (http://geodsoft.com/howto/harden/OpenBSD/syslock.txt) but no
# longer bears much resemblance to it except in its function.
# ---
# Written 11 June 2004 by Jim Lippard (version 1.0).
# Modified 9 November 2006 by Jim Lippard to add do-not-recurse option (version 1.1).
#    File paths beginning with a + will not have contents of subdirectories locked or
#    unlocked.
# Modified 27 December 2011 by Jim Lippard to determine system or user
#    immutability from syslock.conf and add Linux support.
# Modified 1 October 2016 by Jim Lippard to add option - which will lock
#    contents of a directory but not the directory itself.
# Modified 2 October 2016 by Jim Lippard to add -s singleuser mode and
#    ! singleuser-unlocked option.
# Modified 8 October 2016 by Jim Lippard to add -c config option and
#    -g group option, and group tags for sets of paths.
# Modified 8 October 2016 by Jim Lippard to complain when bad args are
#    supplied.
# Modified 1 February 2023 by Jim Lippard to fix error in error message.
# Modified 12 February 2023 by Jim Lippard to warn about non-standard
#    characters in filenames in config and to test for existence of files
#    and issue warnings (without halting) if they don't exist rather than
#    trying to lock or unlock nonexistent files.
# Modified 20 May 2023 by Jim Lippard to only mount / rw if it's mounted
#    ro and to attempt to determine that on both BSD and Linux (previously
#    BSD location of mount command was assumed and the mount command was
#    always issued).
# Modified 30 August 2023 by Jim Lippard to add -v (verbose) flag.
#    Return / mount to read-only if we changed it.
# Modified 5 January 2024 by Jim Lippard to add -w (wait) flag to syslock.
#    If kernel reordering or library link randomization is in process,
#    wait for it to complete; for OpenBSD. Add pledge for OpenBSD,
#    but not bothering with unveil.
# Modified 18 January 2024 by Jim Lippard to remove extraneous \n from
#    $level and to no longer require that securelevel be <2 for -s given
#    how rc.securelevel works.
# Modified 13 July 2024 by Jim Lippard to add uchg group, which allows
#    locking and unlocking files with uchg when schg is the default. (If
#    ussing immutable-flag: uchg, it's a no-op.)
# Modified 14 July 2024 by Jim Lippard to allow -g group:uchg, to allow
#    locking and unlocking files that are in group and are also in uchg
#    group.
#
#    File paths beginning with a ! will be locked or unlocked when -s is used (as well as when it
#    is not). File paths without a ! will not be touched when -s is used. This allows you to
#    put syslock -s in rc.securelevel and do sysunlock -s after rc.shutdown, so that files with ! will
#    be unlocked when in single user mode. This was added to allow shared object library
#    reordering, which occurs on boot prior to securelevel change. This means all libraries end up
#    unlocked in single user mode, unless all other libraries are listed individually, since there's
#    not currently a way to make an exception within a directory that is otherwise being locked.

### Required packages.

use strict;
use Getopt::Std;
use if $^O eq "openbsd", "OpenBSD::Pledge";

### Global constants.

my $DEFAULT_CONFIG_FILE = '/etc/syslock.conf';

my $VERSION = '1.6a of 14 July 2024';

my $LOCK = 0;
my $UNLOCK = 1;

my $BSD_SYS_IMMUTABLE_FLAG_ON = 'schg';
my $BSD_USER_IMMUTABLE_FLAG_ON = 'uchg';
my $LINUX_IMMUTABLE_FLAG_ON = '+i';
my $LINUX_IMMUTABLE_FLAG_OFF = '-i';

my $BSD_MOUNT_COMMAND = '/sbin/mount';
my $LINUX_MOUNT_COMMAND = '/usr/bin/mount';
my $BSD_MOUNT_ARGS = '-uw /';
my $BSD_MOUNT_RO_ARGS = '-u -o ro /';
my $LINUX_MOUNT_ARGS = '-o remount,rw';
my $LINUX_MOUNT_RO_ARGS = '-o remount,ro';
my $BSD_LOCK_COMMAND = '/usr/bin/chflags';
my $LINUX_LOCK_COMMAND = '/usr/bin/chattr';
my $RECURSE_FLAG = '-R';
my $BSD_SECURELEVEL_COMMAND = '/sbin/sysctl kern.securelevel';

my $PS = '/bin/ps';
my $REORDER_KERNEL = '/usr/libexec/reorder_kernel';
my $RELINK_DIR = '/usr/share/relink';
my $REBUILD_PREFIX = '_rebuild';
my $FIVE_MINUTES = 300;

my $LOCK_OPTIONS = 'sdc:g:vw';
my $UNLOCK_OPTIONS = 'sdc:g:v';

### Global variables.

my ($mode, $level, @files, $file, %dont_recurse, %dont_lock_top_level_dir, %singleuser_unlocked, %group_tags, @all_group_tags, @new_group_tags, $group_tag,
    @uchg_group_tags);

my ($config_file, $bsd, $linux, $lock_command, $lock_flag, $unlock_flag,
    $singleuser_flag, $uchg_group_flag, $uchg_group_in_use_flag, $debug_flag,
    $specified_group_tag, %opts, $options,
    $current_group_tags, @file_group_tags, $path, $verbose_flag,
    $displayed_verbose_group_msg_flag,
    $root_was_ro, $wait_flag, $waiting, $waiting_on_kernel,
    $waiting_on_libs, $start_time, $reason);
my ($temp_lock_flag, $temp_unlock_flag);

### Main program.

# Pledge early, why not?
if ($^O eq 'openbsd') {
    # stdio included. do we need ps?
    pledge ('rpath', 'wpath', 'fattr', 'exec', 'proc');
}

if ($0 =~ /syslock$/) {
    $mode = $LOCK;
    $options = $LOCK_OPTIONS;
}
elsif ($0 =~ /sysunlock$/) {
    $mode = $UNLOCK;
    $options = $UNLOCK_OPTIONS;
}
else {
    die "syslock/sysunlock: I've been invoked under someone else's name: $0\n";
}

$singleuser_flag = 0;
$debug_flag = 0;
$specified_group_tag = 0;
$uchg_group_flag = 0;
$verbose_flag = 0;
$wait_flag = 0;

# Get options.
getopts ($options, \%opts) || exit;

if ($#ARGV != -1) {
    if ($mode == $LOCK) {
	die "Usage: $0 [-s|-d|-v|-w|-c config_file|-g group-tag]\n";
    }
    else {
	die "Usage: $0 [-s|-d|-v|-c config_file|-g group-tag]\n";
    }
}

$config_file = $opts{'c'} || $DEFAULT_CONFIG_FILE;
$specified_group_tag = $opts{'g'};
$singleuser_flag = $opts{'s'};
$debug_flag = $opts{'d'};
$verbose_flag = $opts{'v'};
$wait_flag = $opts{'w'};

print "singleuser_flag = 1\n" if ($debug_flag && $singleuser_flag);

$bsd = $linux = 0;

$current_group_tags = 0;

$root_was_ro = 0;

# BSD or Linux?
if (-e $BSD_LOCK_COMMAND) {
    $bsd = 1;
    # Default is system immutability, but this is changeable in config file.
    $lock_command = $BSD_LOCK_COMMAND;
    $lock_flag = $BSD_SYS_IMMUTABLE_FLAG_ON;
    $unlock_flag = "no$lock_flag";
}
elsif (-e $LINUX_LOCK_COMMAND) {
    $linux = 1;
    $lock_command = $LINUX_LOCK_COMMAND;
    $lock_flag = $LINUX_IMMUTABLE_FLAG_ON;
    $unlock_flag = $LINUX_IMMUTABLE_FLAG_OFF;
}
else {
    die "Immutability flags do not appear to be supported by your system.\n";
}

die "-w option not supported by your operating system.\n" if ($^O ne 'openbsd');

if ($debug_flag) {
    $lock_command = '/bin/echo ' . $lock_command;
}

open (CONFIG, $config_file) || die "Cannot open config file. $config_file\n";
while (<CONFIG>) {
    chop; # This causes an error if there is no newline at the end of the config.
    if (/^\s*$|^\s*#/) { # Comment or blank space.
    }
    elsif (/^immutable-flag:\s+(\w+)$/) {
	if (($1 eq $BSD_SYS_IMMUTABLE_FLAG_ON) ||
		     ($1 eq $BSD_USER_IMMUTABLE_FLAG_ON)) {
	    if ($linux) {
		die "Config file specifies BSD lock flag type but this appears to be a Linux system.\n";
	    }
	    $lock_flag = $1;
	    $unlock_flag = "no$1";
	}
	elsif ($1 eq $LINUX_IMMUTABLE_FLAG_ON) {
	    if ($bsd) {
		die "Config file specifies Linux lock flag type but this appears to be a BSD system.\n";
	    }
	}
	else {
	    die "Config file specifies unknown lock flag type \"$1\".\n";
	}
    }
    elsif (/^group:\s+([\w\s\-]+)/) {
	$current_group_tags = $1;
	print "DEBUG: current_group_tags = $current_group_tags\n" if ($debug_flag);
	@new_group_tags = split (/\s+/, $current_group_tags);
	if ($bsd && grep (/^$BSD_USER_IMMUTABLE_FLAG_ON$/, @new_group_tags)) {
	    $uchg_group_flag = 1;
	    $uchg_group_in_use_flag = 1;
	}
	else {
	    $uchg_group_in_use_flag = 0;
	}
	foreach $group_tag (@new_group_tags) {
	    push (@uchg_group_tags, $group_tag) if ($bsd &&
						    $uchg_group_in_use_flag &&
						    $group_tag ne $BSD_USER_IMMUTABLE_FLAG_ON);
	    if (!grep (/^$group_tag$/, @all_group_tags)) {
		push (@all_group_tags, $group_tag);
	    }
	}
    }
    elsif (/^group:/) {
	die "Invalid characters in \"group:\" tag. $_\n";
    }
    elsif (/^([\-\+!])(.*)/) {
	$options = $1;
	$path = $2;
	&_file_warnings ($path);
	if ($options =~ /-/) {
	    $dont_lock_top_level_dir{$path} = 1;
	    print "DEBUG: dont_lock_top_level_dir: $path\n" if ($debug_flag);
	}
	if ($options =~ /\+/) {
	    $dont_recurse{$path} = 1;
	    print "DEBUG: dont_recurse: $path\n" if ($debug_flag);
	}
	if ($options =~ /!/) {
	    $singleuser_unlocked{$path} = 1;
	    print "DEBUG: singleuser_unlocked: $path\n" if ($debug_flag);
	}
	push (@files, $path);
	$group_tags{$path} = $current_group_tags if ($current_group_tags);
    }
    else {
	&_file_warnings ($_);
	push (@files, $_);
	$group_tags{$_} = $current_group_tags if ($current_group_tags);
    }
}
close (CONFIG);

# Make sure specified group tag exists.
#
# Two special cases are:
# groupname:uchg -- only use the subset of groupname that is also in uchg
#     group. This doesn't verify that the intersection is non-null.
# uchg -- only do uchg group.
if ($specified_group_tag) {
    $displayed_verbose_group_msg_flag = 0 if ($verbose_flag);
    if ($bsd && $specified_group_tag =~ /^$BSD_USER_IMMUTABLE_FLAG_ON$|^(.*):$BSD_USER_IMMUTABLE_FLAG_ON$/) {
	if (defined ($1)) {
	    $specified_group_tag = $1;
	    if (!grep (/^$specified_group_tag$/, @all_group_tags)) {
		die "Specified group tag \"$specified_group_tag\" doesn't exist.\n";
	    }
	    elsif (!grep (/^$specified_group_tag$/, @uchg_group_tags)) {
		die "Specified group tag \"$specified_group_tag\" doesn't appear with group tag \"$BSD_USER_IMMUTABLE_FLAG_ON\".\n";
	    }
	}

	# No-op if already using $BSD_USER_IMMUTABLE_FLAG_ON.
	if ($lock_flag eq $BSD_SYS_IMMUTABLE_FLAG_ON) {
	    $uchg_group_flag = 1;
	    $lock_flag = $BSD_USER_IMMUTABLE_FLAG_ON;
	    $unlock_flag = "no$lock_flag";
	}

	if (!grep (/^$BSD_USER_IMMUTABLE_FLAG_ON$/, @all_group_tags)) {
	    die "Specified group tag \"$specified_group_tag\" doesn't exist.\n";
	}
    }
    elsif (!grep (/^$specified_group_tag$/, @all_group_tags)) {
	die "Specified group tag \"$specified_group_tag\" doesn't exist.\n";
    }
}

# If lock, no securelevel requirement, even if -s (singleuser_flag) is given. (No longer a requirement.)
# If unlock, BSD, and using system immutability, securelevel must be < 2.
if ($bsd && $lock_flag eq $BSD_SYS_IMMUTABLE_FLAG_ON) {
    $level = `$BSD_SECURELEVEL_COMMAND`;
    chop ($level);
    $level =~ s/kern\.securelevel\s*=\s*(\d+)/$1/;
    if ($mode == $UNLOCK && $level > 1) {
	die "System securelevel is $level; sysunlock requires securelevel < 2.\n";
    }
}

# OpenBSD only.
if ($wait_flag) {
    $waiting = 1;
    $start_time = time();
    while ($waiting) {
	# check on kernel reordering
	open (CHECKPS, '-|', "$PS -auwx") || die "Cannot check for kernel reordering. $!\n";
	$waiting_on_kernel = 0;
	while (<CHECKPS>) {
	    if (/$REORDER_KERNEL/) {
		$waiting_on_kernel = 1;
		last;
	    }
	}
	close (CHECKPS);
	# check on library randomization
	opendir (DIR, $RELINK_DIR) || die "Cannot check for library randomization. $!\n";
	$waiting_on_libs = grep (/^$REBUILD_PREFIX\.\w+$/, readdir (DIR));
	closedir (DIR);
	$waiting = $waiting_on_kernel || $waiting_on_libs;
	$reason = sprintf "%s%s%s", $waiting_on_kernel ? 'kernel reordering' : '', ($waiting_on_kernel && $waiting_on_libs) ? ' and ' : '', $waiting_on_libs ? 'library randomization' : '';
	print "Waiting on $reason.\n" if ($verbose_flag);
	sleep 1 if ($waiting);
	if (time() - $start_time > $FIVE_MINUTES) {
	    die "Timeout after five minutes waiting on $reason.\n";
	}
    }
}

# If / happens to be mounted as readonly, make it writeable.
if (&_root_ro) {
    $root_was_ro = 1;
    print "mounting / as writable\n" if ($verbose_flag);
    if ($bsd) {
	system "$BSD_MOUNT_COMMAND $BSD_MOUNT_ARGS" unless ($debug_flag);
    }
    else {
	system "$LINUX_MOUNT_COMMAND $LINUX_MOUNT_ARGS" unless ($debug_flag);
    }
}

foreach $file (@files) {
    @file_group_tags = split (/\s+/, $group_tags{$file}) if ($specified_group_tag || $uchg_group_flag);

    if ($uchg_group_flag) {
	# If file is in uchg group, temporarily change how we lock and unlock.
	if (grep (/^$BSD_USER_IMMUTABLE_FLAG_ON$/, @file_group_tags)) {
	    $uchg_group_in_use_flag = 1;
	    # Use uchg.
	    $lock_flag = $BSD_USER_IMMUTABLE_FLAG_ON;
	    $unlock_flag = "no$lock_flag";
	}
	# Restore if it's not.
	elsif ($uchg_group_in_use_flag && grep (!/^$BSD_USER_IMMUTABLE_FLAG_ON$/, @file_group_tags)) {
	    # Use schg.
	    $uchg_group_in_use_flag = 0;
	    $lock_flag = $BSD_SYS_IMMUTABLE_FLAG_ON;
	    $unlock_flag = "no$lock_flag";
	}
    }

    if ((!$singleuser_flag || $singleuser_unlocked{$file}) &&
	(!$specified_group_tag || &_in_group ($specified_group_tag, $uchg_group_flag, @file_group_tags))) {
	if ($mode == $LOCK) {
	    if ($specified_group_tag &&
		$verbose_flag &&
		!$displayed_verbose_group_msg_flag) {
		print "locking group $specified_group_tag";
		print ":$BSD_USER_IMMUTABLE_FLAG_ON" if ($uchg_group_in_use_flag && $specified_group_tag ne $BSD_USER_IMMUTABLE_FLAG_ON);
		print "\n";
		$displayed_verbose_group_msg_flag = 1;
	    }
	    if (-d $file) {
		if ($dont_recurse{$file}) {
		    print "locking $file/*\n" if ($verbose_flag);
		    system "$lock_command $lock_flag $file/*";
		    print "locking $file\n" if ($verbose_flag && !$dont_lock_top_level_dir{$file});
		    system "$lock_command $lock_flag $file" unless $dont_lock_top_level_dir{$file};
		}
		elsif ($dont_lock_top_level_dir{$file}) {
		    print "recursively locking $file/*\n" if ($verbose_flag);
		    system "$lock_command $RECURSE_FLAG $lock_flag $file/*";
		}
		else {
		    print "recursively locking $file\n" if ($verbose_flag);
		    system "$lock_command $RECURSE_FLAG $lock_flag $file";
		}
	    }
	    elsif (-e $file) {
		print "locking $file\n" if ($verbose_flag);
		system "$lock_command $lock_flag $file";
	    }
	    else {
		print "Not locking. File path in config does not exist. $!. $file\n";
	    }
	}
	else {
	    if ($specified_group_tag &&
		$verbose_flag &&
		!$displayed_verbose_group_msg_flag) {
		print "unlocking group $specified_group_tag";
		print ":$BSD_USER_IMMUTABLE_FLAG_ON" if ($uchg_group_in_use_flag && $specified_group_tag ne $BSD_USER_IMMUTABLE_FLAG_ON);
		print "\n";
		$displayed_verbose_group_msg_flag = 1;
	    }
	    if (-d $file) {
		if ($dont_recurse{$file}) {
		    print "unlocking $file\n" if ($verbose_flag && !$dont_lock_top_level_dir{$file});		    
		    system "$lock_command $unlock_flag $file" unless $dont_lock_top_level_dir{$file};
		    print "unlocking $file/*\n" if ($verbose_flag);
		    system "$lock_command $unlock_flag $file/*";
		}
		elsif ($dont_lock_top_level_dir{$file}) {
		    print "recursively unlocking $file/*\n" if ($verbose_flag);
		    system "$lock_command $RECURSE_FLAG $unlock_flag $file/*";
		}
		else {
		    print "recursively unlocking $file\n" if ($verbose_flag);
		    system "$lock_command $RECURSE_FLAG $unlock_flag $file";
		}
	    }
	    elsif (-e $file) {
		print "unlocking $file\n" if ($verbose_flag);
		system "$lock_command $unlock_flag $file";
	    }
	    else {
		print "Not unlocking. File path in config does not exist. $file\n";
	    }
	}
    }
}

# If / was mounted as readonly, make it readonly again.
if ($root_was_ro) {
    print "mounting / as readonly\n" if ($verbose_flag);
    if ($bsd) {
	system "$BSD_MOUNT_COMMAND $BSD_MOUNT_RO_ARGS" unless ($debug_flag);
    }
    else {
	system "$LINUX_MOUNT_COMMAND $LINUX_MOUNT_RO_ARGS" unless ($debug_flag);
    }
}

# Subroutine to return 1 if file is in specified group, 0 otherwise.
sub _in_group {
    my ($specified_group_tag, $uchg_group_flag, @file_group_tags) = @_;

    # If it's in the group ...
    if (grep (/^$specified_group_tag$/, @file_group_tags)) {
	# and we don't care about uchg...
	return 1 if (!$uchg_group_flag);
	# or the specified group is already uchg...
	return 1 if ($specified_group_tag eq $BSD_USER_IMMUTABLE_FLAG_ON);
	# or it's also in the uchg group...
	return 1 if (grep (/^$BSD_USER_IMMUTABLE_FLAG_ON$/, @file_group_tags));
    }

    # Otherwise.
    return 0;
}

# Subroutine to warn about unusual characters or nonexistent file paths in config.
sub _file_warnings {
    my ($path) = @_;
    
    if ($path !~ /^[\w\-+\.\/]+$/) {
	print "Warning: Unusual characters in file path in config. \"$path\"\n";
    }
    if (!-e $path) {
	print "Warning: File path in config inaccessible or does not exist. $!. $path\n";
    }
}

# Subroutine to determine if / is mounted read-only.
sub _root_ro {
    my ($mount_output, $mount_opts_list, @mount_opts);

    if ($bsd) {
	$mount_output = `$BSD_MOUNT_COMMAND`;
    }
    else {
	$mount_output = `$LINUX_MOUNT_COMMAND`;
    }
    if ($mount_output =~ /\/.* on \/ type.*\((.*)\)/) {
	$mount_opts_list = $1;
	@mount_opts = split (/,/, $mount_opts_list);
	return 1 if (grep (/^ro$/, @mount_opts));
    }

    return 0;
}
