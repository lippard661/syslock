#!/usr/bin/perl -w
# Script to lock/unlock system files by making them immutable.
# Unlocking must be done as root from single user mode.
#
# This code was inspired by code by George Shaffer
# (http://geodsoft.com/howto/harden/OpenBSD/syslock.txt) but no
# longer bears much resemblance to it except in its function.
# ---
# Written 11 June 2004 by Jim Lippard (version 1.0).
# Modified 9 November 2006 by Jim Lippard to add do-not-recurse option (version 1.1).
#    File paths beginning with a + will not have contents of subdirectories locked or
#    unlocked.
# Modified 27 December 2011 by Jim Lippard to determine system or user
#    immutability from syslock.conf and add Linux support.
# Modified 1 October 2016 by Jim Lippard to add option - which will lock
#    contents of a directory but not the directory itself.
# Modified 2 October 2016 by Jim Lippard to add -s singleuser mode and
#    ! singleuser-unlocked option.
# Modified 8 October 2016 by Jim Lippard to add -c config option and
#    -g group option, and group tags for sets of paths.
# Modified 8 October 2016 by Jim Lippard to complain when bad args are
#    supplied.
# Modified 1 February 2023 by Jim Lippard to fix error in error message.
# Modified 12 February 2023 by Jim Lippard to warn about non-standard
#    characters in filenames in config and to test for existence of files
#    and issue warnings (without halting) if they don't exist rather than
#    trying to lock or unlock nonexistent files.
# Modified 20 May 2023 by Jim Lippard to only mount / rw if it's mounted
#    ro and to attempt to determine that on both BSD and Linux (previously
#    BSD location of mount command was assumed and the mount command was
#    always issued).
# Modified 30 August 2023 by Jim Lippard to add -v (verbose) flag.
#    Return / mount to read-only if we changed it.
# Modified 5 January 2024 by Jim Lippard to add -w (wait) flag to syslock.
#    If kernel reordering or library link randomization is in process,
#    wait for it to complete; for OpenBSD. Add pledge for OpenBSD,
#    but not bothering with unveil.
# Modified 18 January 2024 by Jim Lippard to remove extraneous \n from
#    $level and to no longer require that securelevel be < 1 for -s given
#    how rc.securelevel works. [Reverted latter with -f, must now use -swf.]
# Modified 13 July 2024 by Jim Lippard to add uchg group, which allows
#    locking and unlocking files with uchg when schg is the default. (If
#    using immutable-flag: uchg, it's a no-op.)
# Modified 14 July 2024 by Jim Lippard to allow -g group:uchg, to allow
#    locking and unlocking files that are in group and are also in uchg
#    group.
# Modified 20 July 2024 by Jim Lippard to add schg group and allow
#    -g group:schg to allow locking and unlocking files that are in
#    group and also in schg group. (If using immutable-flag: schg,
#    it's a no-op.) If sysunlock is used without args and system is not
#    in single-user mode, files in schg group will not be unlocked.
#    (A warning will be displayed if -v is used, otherwise this will
#    occur silently.)
#    Added -f (force) option to force attempt to lock schg files even
#    if securelevel > 0 (and changed behavior back to not do so by
#    default).
# Modified 29 August 2024 by Jim Lippard to add error checking on pledge.
# Modified 30 August 2024 by Jim Lippard to add -a (audit) option, which
#    makes no changes but simply reports divergences from the configuration
#    (or parts thereof based on -g options). Ignores system securelevel
#    limitations. With syslock, tells what is still unlocked; with sysunlock,
#    tells what is still locked.
# Modified 31 August 2024 by Jim Lippard to fix some dumb Linux bugs,
#    including failing to use lsattr -d to get directory immutable flags
#    instead of listing of flags on directory contents.
# Modified 28 November 2024 by Jim Lippard to reverse order of lib randomization
#    and kernel reordering checks.
# Modified 14 July 2025 by Jim Lippard to reject config file paths containing
#    shell metacharacters and to execute system calls without shell except
#    when needed (ideally would do my its own recursion), both related to
#    potential unsanitized input in config file that could be used for
#    command injection--but the config should only be writable by root.
# Modified 14 July 2025 by Jim Lippard with suggestions from ChatGPT 4o to
#    tighten up security slightly more.
#
#    File paths beginning with a ! will be locked or unlocked when -s is used (as well as when it
#    is not). File paths without a ! will not be touched when -s is used. This allows you to
#    put syslock -s in rc.securelevel and do sysunlock -s after rc.shutdown, so that files with ! will
#    be unlocked when in single user mode. This was added to allow shared object library
#    reordering, which occurs on boot prior to securelevel change. This means all libraries end up
#    unlocked in single user mode, unless all other libraries are listed individually, since there's
#    not currently a way to make an exception within a directory that is otherwise being locked.

### Required packages.

use strict;
use Getopt::Std;
use if $^O eq "openbsd", "OpenBSD::Pledge";

### Sanitize environment.
BEGIN {
    $ENV{PATH} = '/usr/bin:/bin';
    delete @ENV{qw(IFS CDPATH ENV BASH_ENV)};
}

### Global constants.

my $DEFAULT_CONFIG_FILE = '/etc/syslock.conf';

my $VERSION = '1.9 of 14 July 2025';

my $LOCK = 0;
my $UNLOCK = 1;

my $BSD_SYS_IMMUTABLE_FLAG_ON = 'schg';
my $BSD_USER_IMMUTABLE_FLAG_ON = 'uchg';
my $LINUX_IMMUTABLE_FLAG_ON = '+i';
my $LINUX_IMMUTABLE_FLAG_OFF = '-i';

my $BSD_MOUNT_COMMAND = '/sbin/mount';
my $LINUX_MOUNT_COMMAND = '/usr/bin/mount';
my @BSD_MOUNT_ARGS = ('-uw', '/');
my @BSD_MOUNT_RO_ARGS = ('-u', '-o', 'ro', '/');
my @LINUX_MOUNT_ARGS = ('-o', 'remount,rw');
my @LINUX_MOUNT_RO_ARGS = ('-o', 'remount,ro');
my $BSD_LOCK_COMMAND = '/usr/bin/chflags';
my $LINUX_LOCK_COMMAND = '/usr/bin/chattr';
my $RECURSE_FLAG = '-R';
my $BSD_SECURELEVEL_COMMAND = '/sbin/sysctl kern.securelevel';

my $ECHO = '/bin/echo';
my $PS = '/bin/ps';
my $REORDER_KERNEL = '/usr/libexec/reorder_kernel';
my $RELINK_DIR = '/usr/share/relink';
my $REBUILD_PREFIX = '_rebuild';
my $FIVE_MINUTES = 300;

my $LOCK_OPTIONS = 'asdfc:g:vw';
my $UNLOCK_OPTIONS = 'asdc:g:v';

### Global variables.

my ($mode, $level, @files, $file, %dont_recurse, %dont_lock_top_level_dir, %singleuser_unlocked, %group_tags, @all_group_tags, @new_group_tags, $group_tag,
    @uchg_group_tags, @schg_group_tags);

my ($config_file, $bsd, $linux, @lock_command, $lock_flag, $unlock_flag,
    $singleuser_flag,
    $uchg_group_flag, # uchg group exists
    $uchg_group_in_use_flag, # uchg group is used in the section of config or current processing
    $uchg_group_specified_flag, # -g uchg or -g group:uchg
    $schg_group_flag, # schg group exists
    $schg_group_in_use_flag, # schg group is used in the section of config or current processing
    $schg_group_specified_flag, # -g schg or -g group:schg
    $debug_flag,
    $specified_group_tag, %opts, $options,
    $current_group_tags, @file_group_tags, $path, $verbose_flag,
    $displayed_verbose_group_msg_flag,
    $root_was_ro, $wait_flag, $waiting, $waiting_on_kernel,
    $waiting_on_libs, $start_time, $reason,
    $force_flag, $audit_flag);
my ($temp_lock_flag, $temp_unlock_flag);

### Main program.

# Pledge early, why not?
if ($^O eq 'openbsd') {
    # stdio included. do we need ps?
    pledge ('rpath', 'wpath', 'fattr', 'exec', 'proc') || die "Cannot pledge promises. $!\n";
}

if ($0 =~ /syslock$/) {
    $mode = $LOCK;
    $options = $LOCK_OPTIONS;
}
elsif ($0 =~ /sysunlock$/) {
    $mode = $UNLOCK;
    $options = $UNLOCK_OPTIONS;
}
else {
    die "syslock/sysunlock: I've been invoked under someone else's name: $0\n";
}

$singleuser_flag = 0;
$debug_flag = 0;
$specified_group_tag = 0;
$uchg_group_flag = 0;
$schg_group_flag = 0;
$verbose_flag = 0;
$wait_flag = 0;
$force_flag = 0;
$audit_flag = 0;

# Get options.
getopts ($options, \%opts) || exit;

if ($#ARGV != -1) {
    if ($mode == $LOCK) {
	die "Usage: $0 [-s|-d|-v|-w|-f|-a|-c config_file|-g group-tag]\n";
    }
    else {
	die "Usage: $0 [-s|-d|-v|-a|-c config_file|-g group-tag]\n";
    }
}

$config_file = $opts{'c'} || $DEFAULT_CONFIG_FILE;
$specified_group_tag = $opts{'g'};
$uchg_group_specified_flag = 1 if (defined ($specified_group_tag) && $specified_group_tag =~ /$BSD_USER_IMMUTABLE_FLAG_ON$/);
$schg_group_specified_flag = 1 if (defined ($specified_group_tag) && $specified_group_tag =~ /$BSD_SYS_IMMUTABLE_FLAG_ON$/);
$singleuser_flag = $opts{'s'};
$debug_flag = $opts{'d'};
$verbose_flag = $opts{'v'};
$wait_flag = $opts{'w'};
$force_flag = $opts{'f'};
$audit_flag = $opts{'a'};

die "Cannot use -a (audit) with -f (force).\n" if ($audit_flag && $force_flag);
die "Cannot use -a (audit) with -w (wait).\n" if ($audit_flag && $wait_flag);
die "Cannot use -a (audit) with -v (verbose).\n" if ($audit_flag && $verbose_flag);
die "-w option not supported by your operating system.\n" if ($wait_flag && $^O ne 'openbsd');

print "singleuser_flag = 1\n" if ($debug_flag && $singleuser_flag);

$bsd = $linux = 0;

$current_group_tags = 0;

$root_was_ro = 0;

# BSD or Linux?
if (-e $BSD_LOCK_COMMAND) {
    $bsd = 1;
    # Default is system immutability, but this is changeable in config file.
    @lock_command = ($BSD_LOCK_COMMAND);
    $lock_flag = $BSD_SYS_IMMUTABLE_FLAG_ON;
    $unlock_flag = "no$lock_flag";
}
elsif (-e $LINUX_LOCK_COMMAND) {
    if ($ENV{'USER'} ne 'root') {
	die "Must be run as root.\n";
    }
    $linux = 1;
    @lock_command = ($LINUX_LOCK_COMMAND, '-f');
    $lock_flag = $LINUX_IMMUTABLE_FLAG_ON;
    $unlock_flag = $LINUX_IMMUTABLE_FLAG_OFF;
}
else {
    die "Immutability flags do not appear to be supported by your system.\n";
}

if ($debug_flag) {
    unshift (@lock_command, $ECHO);
}

print "DEBUG: opening config file\n" if ($debug_flag);
open (CONFIG, $config_file) || die "Cannot open config file. $config_file\n";
while (<CONFIG>) {
    chomp;
    if (/^\s*$|^\s*#/) { # Comment or blank space.
    }
    elsif (/^immutable-flag:\s+(\w+)$/) {
	if (($1 eq $BSD_SYS_IMMUTABLE_FLAG_ON) ||
		     ($1 eq $BSD_USER_IMMUTABLE_FLAG_ON)) {
	    if ($linux) {
		die "Config file specifies BSD lock flag type but this appears to be a Linux system.\n";
	    }
	    $lock_flag = $1;
	    $unlock_flag = "no$1";
	}
	elsif ($1 eq $LINUX_IMMUTABLE_FLAG_ON) {
	    if ($bsd) {
		die "Config file specifies Linux lock flag type but this appears to be a BSD system.\n";
	    }
	}
	else {
	    die "Config file specifies unknown lock flag type \"$1\".\n";
	}
    }
    elsif (/^group:\s+([\w\s\-]+)/) {
	$current_group_tags = $1;
	print "DEBUG: current_group_tags = $current_group_tags\n" if ($debug_flag);
	@new_group_tags = split (/\s+/, $current_group_tags);
	if ($bsd && grep (/^$BSD_USER_IMMUTABLE_FLAG_ON$/, @new_group_tags)) {
	    $uchg_group_flag = 1;
	    $uchg_group_in_use_flag = 1;
	}
	else {
	    $uchg_group_in_use_flag = 0;
	}
	if ($bsd && grep (/^$BSD_SYS_IMMUTABLE_FLAG_ON$/, @new_group_tags)) {
	    die "Cannot use both $BSD_USER_IMMUTABLE_FLAG_ON and $BSD_SYS_IMMUTABLE_FLAG_ON groups in combination. $_\n" if ($uchg_group_in_use_flag);

	    $schg_group_flag = 1;
	    $schg_group_in_use_flag = 1;
	}
	else {
	    $schg_group_in_use_flag = 0;
	}
	foreach $group_tag (@new_group_tags) {
	    push (@uchg_group_tags, $group_tag) if ($bsd &&
						    $uchg_group_in_use_flag &&
						    $group_tag ne $BSD_USER_IMMUTABLE_FLAG_ON);
	    push (@schg_group_tags, $group_tag) if ($bsd &&
						    $schg_group_in_use_flag &&
						    $group_tag ne $BSD_SYS_IMMUTABLE_FLAG_ON);
	    if (!grep (/^$group_tag$/, @all_group_tags)) {
		push (@all_group_tags, $group_tag);
	    }
	}
    }
    elsif (/^group:/) {
	die "Invalid characters in \"group:\" tag. $_\n";
    }
    elsif (/^([\-\+!])(.*)/) {
	$options = $1;
	$path = $2;
	&_file_warnings ($path);
	if ($options =~ /-/) {
	    $dont_lock_top_level_dir{$path} = 1;
	    print "DEBUG: dont_lock_top_level_dir: $path\n" if ($debug_flag);
	}
	if ($options =~ /\+/) {
	    $dont_recurse{$path} = 1;
	    print "DEBUG: dont_recurse: $path\n" if ($debug_flag);
	}
	if ($options =~ /!/) {
	    $singleuser_unlocked{$path} = 1;
	    print "DEBUG: singleuser_unlocked: $path\n" if ($debug_flag);
	}
	push (@files, $path);
	$group_tags{$path} = $current_group_tags if ($current_group_tags);
    }
    else {
	&_file_warnings ($_);
	push (@files, $_);
	$group_tags{$_} = $current_group_tags if ($current_group_tags);
    }
}
close (CONFIG);
print "DEBUG: closing config file\n" if ($debug_flag);

# Make sure specified group tag exists.
#
# Four special cases are:
# groupname:uchg -- only use the subset of groupname that is also in uchg
#     group. This doesn't verify that the intersection is non-null.
# uchg -- only do uchg group.
# groupname:schg -- only use the subset of groupname that is also in schg
#     group. This doesn't verify that the intersection is non-null.
# schg -- only do schg group.
# uchg cases:
if ($specified_group_tag) {
    $displayed_verbose_group_msg_flag = 0 if ($verbose_flag);
    if ($bsd && $specified_group_tag =~ /^$BSD_USER_IMMUTABLE_FLAG_ON$|^(.*):$BSD_USER_IMMUTABLE_FLAG_ON$/) {
	if (defined ($1)) {
	    $specified_group_tag = $1;
	    if (!grep (/^$specified_group_tag$/, @all_group_tags)) {
		die "Specified group tag \"$specified_group_tag\" doesn't exist.\n";
	    }
	    elsif (!grep (/^$specified_group_tag$/, @uchg_group_tags)) {
		die "Specified group tag \"$specified_group_tag\" doesn't appear with group tag \"$BSD_USER_IMMUTABLE_FLAG_ON\".\n";
	    }

	    # No-op if already using $BSD_USER_IMMUTABLE_FLAG_ON.
	    if ($lock_flag eq $BSD_SYS_IMMUTABLE_FLAG_ON) {
		$uchg_group_flag = 1;
		$lock_flag = $BSD_USER_IMMUTABLE_FLAG_ON;
		$unlock_flag = "no$lock_flag";
	    }

	    if (!grep (/^$BSD_USER_IMMUTABLE_FLAG_ON$/, @all_group_tags)) {
		die "Specified group tag \"$specified_group_tag\" doesn't exist.\n";
	    }
	}
    }
    # schg cases:
    elsif ($bsd && $specified_group_tag =~ /^$BSD_SYS_IMMUTABLE_FLAG_ON$|^(.*):$BSD_SYS_IMMUTABLE_FLAG_ON$/) {
	if (defined ($1)) {
	    $specified_group_tag = $1;
	    if (!grep (/^$specified_group_tag$/, @all_group_tags)) {
		die "Specified group tag \"$specified_group_tag\" doesn't exist.\n";
	    }
	    elsif (!grep (/^$specified_group_tag$/, @schg_group_tags)) {
		die "Specified group tag \"$specified_group_tag\" doesn't appear with group tag \"$BSD_SYS_IMMUTABLE_FLAG_ON\".\n";
	    }

	    # No-op if already using $BSD_SYS_IMMUTABLE_FLAG_ON.
	    if ($lock_flag eq $BSD_USER_IMMUTABLE_FLAG_ON) {
		$schg_group_flag = 1;
		$lock_flag = $BSD_SYS_IMMUTABLE_FLAG_ON;
		$unlock_flag = "no$lock_flag";
	    }

	    if (!grep (/^$BSD_SYS_IMMUTABLE_FLAG_ON$/, @all_group_tags)) {
		die "Specified group tag \"$specified_group_tag\" doesn't exist.\n";
	    }
	}
    }   
    elsif (!grep (/^$specified_group_tag$/, @all_group_tags)) {
	die "Specified group tag \"$specified_group_tag\" doesn't exist.\n";
    }
}

# If lock, -f (force) overrides securelevel requirement.
# If lock, no securelevel requirement, even if -s (singleuser_flag) is given. (No longer a requirement.)
# If unlock, BSD, and using system immutability, securelevel must be < 1.
# Don't die if -a (audit), but warn.
if ($bsd && $lock_flag eq $BSD_SYS_IMMUTABLE_FLAG_ON) {
    $level = `$BSD_SECURELEVEL_COMMAND`;
    chop ($level);
    $level =~ s/kern\.securelevel\s*=\s*(\d+)/$1/;
    if ($level > 0) {
	die "System securelevel is $level; sysunlock requires securelevel < 1.\n" if ($mode == $UNLOCK && !$audit_flag);
	print "System securelevel is $level; sysunlock requires securelevel < 1.\n" if ($mode == $UNLOCK && $audit_flag);
	die "System securelevel is $level; syslock requires -f option or securelevel < 1.\n" if ($mode == $LOCK && !$force_flag && !$audit_flag);
	print "System securelevel is $level; syslock requires -f option or securelevel < 1.\n" if ($mode == $LOCK && $audit_flag);
    }
}
# If unlock, BSD, and using user immutability but there are some schg
# groups in use and securelevel not < 1, warn if verbose.
elsif ($bsd && $schg_group_flag) {
    $level = `$BSD_SECURELEVEL_COMMAND`;
    chop ($level);
    $level =~ s/kern\.securelevel\s*=\s*(\d+)/$1/;
    print "Warning: System securelevel is $level; sysunlock will not unlock schg groups unless securelevel < 1.\n" if ($verbose_flag && $mode == $UNLOCK && $level > 0);
    print "Warning: System securelevel is $level; syslock will not lock schg groups unless -f option is used or securelevel < 1.\n" if ($verbose_flag && !$force_flag && $mode == $LOCK && $level > 0);
}

# OpenBSD only.
if ($wait_flag) {
    $waiting = 1;
    $start_time = time();
    while ($waiting) {
	# check on library randomization (unlikely to ever be useful since rc.securelevel runs after this is done)
	opendir (DIR, $RELINK_DIR) || die "Cannot check for library randomization. $!\n";
	$waiting_on_libs = grep (/^$REBUILD_PREFIX\.\w+$/, readdir (DIR));
	closedir (DIR);

	# check on kernel reordering (assumes syslock runs after kernel reordering has begun)
	open (CHECKPS, '-|', "$PS -auwx") || die "Cannot check for kernel reordering. $!\n";
	$waiting_on_kernel = 0;
	while (<CHECKPS>) {
	    if (/$REORDER_KERNEL/) {
		$waiting_on_kernel = 1;
		last;
	    }
	}
	close (CHECKPS);

	$waiting = $waiting_on_kernel || $waiting_on_libs;
	$reason = sprintf "%s%s%s", $waiting_on_kernel ? 'kernel reordering' : '', ($waiting_on_kernel && $waiting_on_libs) ? ' and ' : '', $waiting_on_libs ? 'library randomization' : '';
	print "Waiting on $reason.\n" if ($verbose_flag);
	sleep 1 if ($waiting);
	if (time() - $start_time > $FIVE_MINUTES) {
	    die "Timeout after five minutes waiting on $reason.\n";
	}
    }
}

# If / happens to be mounted as readonly, make it writeable.
if (!$audit_flag && &_root_ro) {
    $root_was_ro = 1;
    print "mounting / as writable\n" if ($verbose_flag);
    if ($bsd) {
	system ($BSD_MOUNT_COMMAND, @BSD_MOUNT_ARGS) unless ($debug_flag);
    }
    else {
	system ($LINUX_MOUNT_COMMAND, @LINUX_MOUNT_ARGS) unless ($debug_flag);
    }
}

foreach $file (@files) {
    @file_group_tags = split (/\s+/, $group_tags{$file}) if ($specified_group_tag || $uchg_group_flag || $schg_group_flag);

    # uchg group is in config
    if ($uchg_group_flag) {
	# If file is in uchg group, temporarily change how we lock and unlock.
	if (grep (/^$BSD_USER_IMMUTABLE_FLAG_ON$/, @file_group_tags)) {
	    $uchg_group_in_use_flag = 1;
	    # Use uchg.
	    $lock_flag = $BSD_USER_IMMUTABLE_FLAG_ON;
	    $unlock_flag = "no$lock_flag";
	}
	# Restore if it's not.
	elsif ($uchg_group_in_use_flag && grep (!/^$BSD_USER_IMMUTABLE_FLAG_ON$/, @file_group_tags)) {
	    # Use schg.
	    $uchg_group_in_use_flag = 0;
	    $lock_flag = $BSD_SYS_IMMUTABLE_FLAG_ON;
	    $unlock_flag = "no$lock_flag";
	}
    }
    # Not an elsif. Can have both groups in use. schg group is in config.
    # We've already verified no config groups have both schg and uchg,
    # which would make this go awry.
    if ($schg_group_flag) {
	# If file is in uchg group, temporarily change how we lock and unlock.
	# If file is in schg group, we're unlocking, and secure level not < 1,
	# then skip it.
	if (grep (/^$BSD_SYS_IMMUTABLE_FLAG_ON$/, @file_group_tags)) {
	    next if ((!$force_flag || $mode == $UNLOCK) && $level > 0);
	    $schg_group_in_use_flag = 1;
	    # Use schg.
	    $lock_flag = $BSD_SYS_IMMUTABLE_FLAG_ON;
	    $unlock_flag = "no$lock_flag";
	}
	# Restore if it's not.
	elsif ($schg_group_in_use_flag && grep (!/^$BSD_SYS_IMMUTABLE_FLAG_ON$/, @file_group_tags)) {
	    # Use uchg.
	    $schg_group_in_use_flag = 0;
	    $lock_flag = $BSD_USER_IMMUTABLE_FLAG_ON;
	    $unlock_flag = "no$lock_flag";
	}
    }

    if ((!$singleuser_flag || $singleuser_unlocked{$file}) &&
	(!$specified_group_tag || &_in_group ($specified_group_tag, $uchg_group_specified_flag, $schg_group_specified_flag, @file_group_tags))) {
	if ($mode == $LOCK) {
	    if ($specified_group_tag &&
		$verbose_flag &&
		!$displayed_verbose_group_msg_flag) {
		print "locking group $specified_group_tag";
		print ":$BSD_USER_IMMUTABLE_FLAG_ON" if ($uchg_group_specified_flag && $specified_group_tag ne $BSD_USER_IMMUTABLE_FLAG_ON);
		print ":$BSD_SYS_IMMUTABLE_FLAG_ON" if ($schg_group_specified_flag && $specified_group_tag ne $BSD_SYS_IMMUTABLE_FLAG_ON);		
		print "\n";
		$displayed_verbose_group_msg_flag = 1;
	    }
	    if ($audit_flag) {
		# Report on what is unlocked that would be locked by command.
		&_audit_file ($file, $lock_flag, $dont_recurse{$file}, $dont_lock_top_level_dir{$file});
	    }
	    elsif (-d $file) {
		if ($dont_recurse{$file}) {
		    print "locking $file/*\n" if ($verbose_flag);
		    foreach my $entry (glob("$file/*")) {
			next unless -e $entry;
			system (@lock_command, $lock_flag, $entry);
		    }
		    print "locking $file\n" if ($verbose_flag && !$dont_lock_top_level_dir{$file});
		    system (@lock_command, $lock_flag, $file) unless $dont_lock_top_level_dir{$file};
		}
		elsif ($dont_lock_top_level_dir{$file}) {
		    print "recursively locking $file/*\n" if ($verbose_flag);
		    foreach my $entry (glob("$file/*")) {
			_recurse_lock_or_unlock ($entry, $lock_flag);
		    }
		}
		else {
		    print "recursively locking $file\n" if ($verbose_flag);
		    system (@lock_command, $RECURSE_FLAG, $lock_flag, $file);
		}
	    }
	    elsif (-e $file) {
		print "locking $file\n" if ($verbose_flag);
		system (@lock_command, $lock_flag, $file);
	    }
	    else {
		print "Not locking. File path in config inaccessible or does not exist. $!. $file\n";
	    }
	}
	else {
	    if ($specified_group_tag &&
		$verbose_flag &&
		!$displayed_verbose_group_msg_flag) {
		print "unlocking group $specified_group_tag";
		print ":$BSD_USER_IMMUTABLE_FLAG_ON" if ($uchg_group_specified_flag && $specified_group_tag ne $BSD_USER_IMMUTABLE_FLAG_ON);
		print ":$BSD_SYS_IMMUTABLE_FLAG_ON" if ($schg_group_specified_flag && $specified_group_tag ne $BSD_SYS_IMMUTABLE_FLAG_ON);	
		print "\n";
		$displayed_verbose_group_msg_flag = 1;
	    }
	    if ($audit_flag) {
		# Report on what is locked that would be unlocked by command.
		&_audit_file ($file, $unlock_flag, $dont_recurse{$file}, $dont_lock_top_level_dir{$file});
	    }
	    elsif (-d $file) {
		if ($dont_recurse{$file}) {
		    print "unlocking $file\n" if ($verbose_flag && !$dont_lock_top_level_dir{$file});		    
		    system (@lock_command, $unlock_flag, $file) unless $dont_lock_top_level_dir{$file};
		    print "unlocking $file/*\n" if ($verbose_flag);
		    foreach my $entry (glob("$file/*")) {
			next unless -e $entry;
			system (@lock_command, $unlock_flag, $entry);
		    }
		}
		elsif ($dont_lock_top_level_dir{$file}) {
		    print "recursively unlocking $file/*\n" if ($verbose_flag);
		    foreach my $entry (glob("$file/*")) {
			_recurse_lock_or_unlock ($entry, $lock_flag);
		    }
		}
		else {
		    print "recursively unlocking $file\n" if ($verbose_flag);
		    system (@lock_command, $RECURSE_FLAG, $unlock_flag, $file);
		}
	    }
	    elsif (-e $file) {
		print "unlocking $file\n" if ($verbose_flag);
		system (@lock_command, $unlock_flag, $file);
	    }
	    else {
		print "Not unlocking. File path in config inaccessible or does not exist. $!. $file\n";
	    }
	}
    }
}

# If / was mounted as readonly, make it readonly again.
if ($root_was_ro) {
    print "mounting / as readonly\n" if ($verbose_flag);
    if ($bsd) {
	system ($BSD_MOUNT_COMMAND, @BSD_MOUNT_RO_ARGS) unless ($debug_flag);
    }
    else {
	system ($LINUX_MOUNT_COMMAND, @LINUX_MOUNT_RO_ARGS) unless ($debug_flag);
    }
}

# Subroutine to return 1 if file is in specified group, 0 otherwise.
sub _in_group {
    my ($specified_group_tag,
	$uchg_group_specified_flag,
	$schg_group_specified_flag,
	@file_group_tags) = @_;

    # If it's in the group ...
    if (grep (/^$specified_group_tag$/, @file_group_tags)) {
	# and we don't care about uchg or schg...
	return 1 if (!$uchg_group_specified_flag && !$schg_group_specified_flag);
	# or the specified group is already uchg/schg...
	return 1 if (($uchg_group_specified_flag &&
		      $specified_group_tag eq $BSD_USER_IMMUTABLE_FLAG_ON) ||
		     ($schg_group_specified_flag &&
		      $specified_group_tag eq $BSD_SYS_IMMUTABLE_FLAG_ON));
	# or it's also in the uchg/schg group...
	return 1 if (($uchg_group_specified_flag &&
		      grep (/^$BSD_USER_IMMUTABLE_FLAG_ON$/, @file_group_tags)) ||
		     ($schg_group_specified_flag &&
		      grep (/^$BSD_SYS_IMMUTABLE_FLAG_ON$/, @file_group_tags)));
    }

    # Otherwise.
    return 0;
}

# Subroutine to warn about unusual characters or nonexistent file paths in config.
sub _file_warnings {
    my ($path) = @_;
    
    if ($path !~ /^[\w\-+\.\/]+$/) {
	die "File path in config contains shell metacharacters. \"$path\"\n" if ($path =~ /[;\|\$\'\"><!&\*\[\]\^\?]/);
	print "Warning: Unusual characters in file path in config. \"$path\"\n";
    }
    if (!-e $path) {
	print "Warning: File path in config inaccessible or does not exist. $!. $path\n";
    }
    if ($linux && -l $path) {
	print "Warning: File path in config is a symlink. $path\n";
    }
}

# Subroutine to determine if / is mounted read-only.
sub _root_ro {
    my ($mount_output, $mount_opts_list, @mount_opts);

    if ($bsd) {
	$mount_output = `$BSD_MOUNT_COMMAND`;
    }
    else {
	$mount_output = `$LINUX_MOUNT_COMMAND`;
    }
    if ($mount_output =~ /\/.* on \/ type.*\((.*)\)/) {
	$mount_opts_list = $1;
	@mount_opts = split (/,/, $mount_opts_list);
	return 1 if (grep (/^ro$/, @mount_opts));
    }

    return 0;
}

# Subroutine to compare actual to desired flags.
sub _desired_flag_mismatch {
    my ($file, $desired_flag, $other_flag) = @_;
    my ($flags, $perms, $nlinks, $uid, $gid);

    if ($bsd) {
	my $LSFLAGS = '/bin/ls -lod';
	$LSFLAGS = '/bin/ls -lOd' if ($^O eq 'darwin');
        $flags = `$LSFLAGS \Q$file\E`;
        ($perms, $nlinks, $uid, $gid, $flags) = split (/\s+/, $flags);
	if ($desired_flag =~ /^no(.*$)/) {
	    return 0 if ($flags eq '-');
	}
	else {
	    return 0 if ($flags eq $desired_flag);
	}
	return $flags;
    }
    else {
	my $LSFLAGS = '/usr/bin/lsattr -d';
	$flags = `$LSFLAGS \Q$file\E`;
	($flags) = split (/\s+/, $flags);
	return 0 if ($desired_flag =~ /\+i/ && $flags =~ /i/);
	return 0 if ($desired_flag =~ /-i/ && $flags =~ /^\-+$/);
	$flags =~ s/^-+$/-/;
	$flags =~ s/-//g if ($flags ne '-');
	return $flags;
    }
}

# Subroutine to recursively lock or unlock files in subdirectories.
sub _recurse_lock_or_unlock {
    my ($path, $flag) = @_;
    return if -l $path; # skip symlinks
    if (-d $path) {
	opendir (my $dh, $path) or return;
	my @entries = grep(!/^\.$|^\.\.$/, readdir($dh));
	closedir ($dh);
	_recurse_lock_or_unlock ("$path/$_", $flag) for @entries;
	system (@lock_command, $flag, $path);
    }
    elsif (-e $path) {
	system (@lock_command, $flag, $path);
    }
}

# Subroutine to report on what's not in the intended state.
# (This currently only looks at the specific flag for BSD, schg/uchg,
# and will call it "unlocked" if it's only locked with the one not checked.)
sub _audit_file {
    my ($file, $desired_flag, $dont_recurse_flag, $dont_lock_top_level_dir_flag, $recurse_level) = @_;
    my ($flags, $desired_state, @subfiles, $subfile, $printed_something, $spaces);

    if ($desired_flag =~ /^no(.*)$/) {
	$desired_state = 'unlocked';
    }
    elsif ($desired_flag eq '-i') {
	$desired_state = 'unlocked';
    }
    elsif ($desired_flag eq '+i') {
	$desired_state = 'locked';
    }
    else {
	$desired_state = 'locked with ' . $desired_flag;
    }

    $recurse_level = 0 if (!defined ($recurse_level));

    $printed_something = 0;
    $spaces = $recurse_level * 3;

    if ($linux && -l $file) {
	print "Warning: ignoring symlink. $file\n";
    }
    elsif (-d $file) {
	# We care about the dir itself.
	if (!$dont_lock_top_level_dir_flag) {
	    if ($flags = &_desired_flag_mismatch ($file, $desired_flag)) {
		print ' 'x$spaces, "$file (should be $desired_state, flags=$flags)\n";
		$printed_something = 1;
	    }
	}
	# Check subdir contents.
	opendir (DIR, $file) || die "Cannot open directory. $!. $file\n";
	@subfiles = grep (!/^\.{1,2}$/, readdir (DIR));
	closedir (DIR);

	foreach $subfile (@subfiles) {
	    if ($linux && -l "$file/$subfile") {
		# Ignore links.
		next;
	    }
	    # If we need to recurse.
	    elsif (-d "$file/$subfile" && !$dont_recurse_flag) {
		$recurse_level++;
		&_audit_file ("$file/$subfile", $desired_flag, $dont_recurse_flag, 0, $recurse_level);
		$recurse_level--;
	    }
	    elsif ($flags = &_desired_flag_mismatch ("$file/$subfile", $desired_flag)) {
		if (!$printed_something) {
		    print ' 'x$spaces, "In $file/:\n";
		    $printed_something = 1;
		}
		print ' 'x$spaces, "   $subfile (should be $desired_state, flags=$flags)\n";

	    }
	}
    }
    # If a file, just audit the file.
    elsif (-e $file) {
	if ($flags = &_desired_flag_mismatch ($file, $desired_flag)) {
	    print "$file (should be $desired_state, flags=$flags)\n";
	}
    }
    # If nonexistent, just report that.
    else {
	print "File path in config inaccessible or does not exist. $!. $file\n";
    }
}
