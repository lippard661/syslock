Done:

* Permit sysunlock to unlock only the uchg portions of other groups, but
not necessarily all uchg groups, even when not in single-user mode. Allow
syslock to operate in the same way (only locking the uchg portions of the
configs group).  Method: -g <group>:uchg

* Allow the reverse of the above: schg groups (group:schg) when the default
is uchg.  sysunlock with no args when uchg is the default doesn't try to
unlock anything in the schg group if not in single-user mode.

* Added option -a (audit) that shows what should be locked but isn't
(with syslock) or what should be unlocked but isn't (with sysunlock).
Can be used with -g to check a subset of the config. (Also already have
-d debug option that shows what would be done without doing it, but that
doesn't check current state.)

Notes/Pointers:

* Would be nice to find a place to run sysunlock prior to library
reordering (even early daemons are too late); can't really do without
mods to /etc/rc. (Workaround is to use sysunlock -s while in single
user mode, i.e., after a shutdown, and then put syslock -s into
rc.securelevel after a long enough sleep for library and kernel
reordering to occur. This is now even more effective on OpenBSD with
-w (wait) option; reorder_libs starts before rc.securelevel execution
and kernel reordering starts a little bit after.) Best way to do this
now is -swf.

* While -w checks for lib reordering, that occurs and completes before
rc.securelevel execution, which is where it's recommended to be used, so
it's not really a useful check.  It might be better for -w to check every
five seconds instead of every second; 10 seconds is sufficient sleep time
for kernel reordering to get started.

* Hard links between directories with different settings (i.e., some uchg,
some schg) can lead to both flags being applied, which can cause issues.
E.g., /usr/libexec/makewhatis = /usr/sbin/makewhatis, so you don't want
/usr/libexec and /usr/sbin to have different flag settings.

* Probably not worth adding unveil, since it would require unveiling / with
r at a minimum, then unveiling all dirs represented in the config file. If
the config file is ordered with higher, less-specific dirs before deeper ones,
could skip unveiling more-specific dirs where the substring at the front
is already unveiled. But there are other tools which use syslock/sysunlock
and which already use unveil which could potentially cause problems (well,
maybe not, since exec/system calls have new pledge and unveil settings
and don't carry them over from the parent).

To Do:

Allow using globs in config file (e.g., /etc/hostname.*)?  Currently
generates warning and will refuse to lock/unlock due to failing
existence test. (This creates a potential root immutable file bypass
without console access on reboot via interfaces where there is no
hostname.<int> file.)

Need a shell script (/bin/sh) which goes into /etc/rc.d and
will run sysunlock with specific groups if PGP-signed
appropriately. (unattached signatures?)  (Note: PGP::Sign
doesn't validate the specific key ID... but do this already with
some signify tools.) [What was the point of this again? For installing
updates? Not currently seeing good reason for this.]
